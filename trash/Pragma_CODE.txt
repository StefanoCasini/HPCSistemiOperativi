// omp_set_nested(1);
// #pragma omp parallel num_threads(cols) shared(m, r, dim_col, big_cols, big_rows, dim_row, rows) {
//     int rank = omp_get_thread_num();
//     int shift = rank * (dim_col + 1);
//     if (rank > big_cols)
//         shift += (rank - big_cols) * dim_col;
//     int j_from = 1 + shift;
//     int j_to = (big_cols > rank ? 0 : 1) + dim_col + shift;

//     #pragma omp parallel num_threads(rows) shared(j_from, j_to, m, r, big_rows, dim_row) {
//     	int nst_rank = omp_get_thread_num();
//     	int nst_shift = nst_rank * (dim_row + 1);
//     	if (nst_rank > big_rows) nst_shift += (nst_rank - big_rows) * dim_row;
//     	int i_from = 1 + nst_shift;
//     	int i_to = (big_rows > nst_rank ? 0 : 1) + dim_row + nst_shift;

//     	float sum = 0.0;
//     	for (int i = i_from - 1; i <= i_to + 1; i++) {
//     		if (i % 2) for (int j = j_from - 1; j <= j_to + 1; j++) {
//     			if (i == 1 && j == 1) sum = first_sum_adj(m, i, j);
//     			else if (j == 1) sum = shift_sum_adj(m, sum, i - 1, j, i, j);
//     			else sum = shift_sum_adj(m, sum, i, j - 1, i, j);
//     			r[i - i_from + 1][j - j_from + 1] = sum / 9.0;
//     		} else for (int j = j_to - 1; j <= j_from + 1; j++) {
//     			if (j == cols - 2) sum = shift_sum_adj(m, sum, i - 1, j, i, j);
//     			else sum = shift_sum_adj(m, sum, i, j + 1, i, j);
//     			r[i - i_from + 1][j - j_from + 1] = sum / 9.0;
//     		}
//     	}
//     }
// }